{
  "name": "backbone.wreqr",
  "description": "A Simple Service Bus For Backbone and Backbone.Marionette",
  "version": "1.2.0",
  "homepage": "https://github.com/marionettejs/backbone.wreqr",
  "main": "lib/amd/backbone.wreqr.js",
  "keywords": [
    "backbone",
    "plugin",
    "client",
    "browser",
    "message",
    "messages",
    "messaging",
    "decoupled",
    "architecture"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/marionettejs/backbone.wreqr/blob/master/LICENSE.md"
    }
  ],
  "scripts": {
    "test": "grunt jasmine",
    "start": "grunt jasmine-server"
  },
  "author": {
    "name": "Derick Bailey",
    "email": "marionettejs@gmail.com",
    "url": "http://derickbailey.lostechies.com"
  },
  "bugs": {
    "url": "https://github.com/marionettejs/backbone.wreqr/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/marionettejs/backbone.wreqr.git"
  },
  "github": "https://github.com/marionettejs/backbone.wreqr",
  "dependencies": {
    "backbone": ">=0.9.9 <=1.1.2",
    "underscore": ">=1.3.3 <=1.6.0"
  },
  "devDependencies": {
    "grunt": "0.4.0",
    "grunt-contrib-jasmine": "0.4.1",
    "grunt-contrib-uglify": "0.1.2",
    "grunt-contrib-concat": "0.1.3",
    "grunt-contrib-jshint": "0.2.0",
    "grunt-contrib-watch": "0.3.1",
    "grunt-contrib-connect": "0.2.0",
    "grunt-template-jasmine-istanbul": "0.2.0",
    "grunt-preprocess": "2.0.0",
    "grunt-plato": "0.1.5",
    "sinon": "1.9.0",
    "jasmine-sinon": "0.3.1"
  },
  "jam": {
    "dependencies": {
      "backbone": ">=0.9.9",
      "underscore": ">=1.3.1"
    },
    "main": "lib/amd/backbone.wreqr.js",
    "include": [
      "lib/amd/backbone.wreqr.js",
      "readme.md"
    ]
  },
  "maintainers": [
    {
      "name": "Stefan Zerkalica",
      "email": "zerkalica@gmail.com",
      "url": "https://github.com/zerkalica"
    },
    {
      "name": "Richard Mitchell",
      "email": "richard.j.mitchell@gmail.com"
    },
    {
      "name": "Joe Gornick",
      "url": "http://joegornick.com"
    }
  ],
  "readme": "# Backbone.Wreqr\n\nA simple infrastructure based on [messaging patterns](http://www.eaipatterns.com/)\nand service bus implementations for decoupling [Backbone](http://backbonejs.org)\nand [Backbone.Marionette](http://marionettejs.com) applications.\n\n## Downloads And Source\n\nGrab the source from the `src` folder above. Grab the most recent builds\nfrom the links below.\n\n### Standard Builds\n\n* Development: [backbone.wreqr.js](https://raw.github.com/marionettejs/backbone.wreqr/master/lib/backbone.wreqr.js)\n\n* Production: [backbone.wreqr.min.js](https://raw.github.com/marionettejs/backbone.wreqr/master/lib/backbone.wreqr.min.js)\n\n### RequireJS (AMD) Builds\n\n* Development: [backbone.wreqr.js](https://raw.github.com/marionettejs/backbone.wreqr/master/lib/amd/backbone.wreqr.js)\n\n* Production: [backbone.wreqr.min.js](https://raw.github.com/marionettejs/backbone.wreqr/master/lib/amd/backbone.wreqr.min.js)\n\n## Basic Use\n\n### Event Aggregator\n\nAn event aggregator implementation. It extends from `Backbone.Events` to\nprovide the core event handling code in an object that can itself be\nextended and instantiated as needed.\n\n```js\nvar vent = new Backbone.Wreqr.EventAggregator();\n\nvent.on(\"foo\", function(){\n  console.log(\"foo event\");\n});\n\nvent.trigger(\"foo\");\n```\n\n### Commands And Request / Response\n\nWreqr can be used by instantiating a `Backbone.Wreqr.Commands`\nor `Backbone.Wreqr.RequestResponse` object. These objects provide a\n`setHandler` method to add a handler for a named request or command.\nCommands can then be executed with the `execute` method, and\nrequest/response can be done through the `request` method.\n\n### Commands\n\n```js\nvar commands = new Backbone.Wreqr.Commands();\n\ncommands.setHandler(\"foo\", function(){\n  console.log(\"the foo command was executed\");\n});\n\ncommands.execute(\"foo\");\n```\n\n### Request/Response\n\n```js\nvar reqres = new Backbone.Wreqr.RequestResponse();\n\nreqres.setHandler(\"foo\", function(){\n  return \"foo requested. this is the response\";\n});\n\nvar result = reqres.request(\"foo\");\nconsole.log(result);\n```\n\n### Radio\n\nRadio is a convenient way for emitting events through channels. Radio can be used to either retrieve a channel, or talk through a channel with either command, reqres, or vent.\n\n```js\n// channels\nvar globalChannel = Backbone.Wreqr.radio.channel('global');\nvar userChannel = Backbone.Wreqr.radio.channel('user');\n\n// Wreqr events\nBackbone.Wreqr.radio.commands.execute( 'global', 'shutdown' );\nBackbone.Wreqr.radio.reqres.request(  'global', 'current-user' );\nBackbone.Wreqr.radio.vent.trigger(  'global', 'game-over');\n\n```\n\n### Channel\nChannel is an object that wraps EventAggregator, Commands, and Reqres. Channels provide a convenient way for the objects in your system to talk to one another without the global channel becoming too noisy.\n\n```js\n// global channel\nvar globalChannel = Backbone.Wreqr.radio.channel('global');\nglobalChannel.commands.execute('shutdown' );\nglobalChannel.reqres.request('current-user' );\nglobalChannel.vent.trigger('game-over');\n\n// user channel\nvar userChannel = Backbone.Wreqr.radio.channel('user');\nuserChannel.commands.execute('punnish');\nuserChannel.reqres.request('user-avatar');\nuserChannel.vent.trigger('win', {\n  level: 2,\n  stars: 3\n});\n```\n\n### Adding Multiple Handlers\n\nMultiple handlers can be set on the Commands and RequestResponse\nobjects in a single call, using the `setHandlers` method and supplying\na `{\"name\": configuration}` hash where the `configuration` is an\nobject literal or a function.\n\n```js\nvar reqres = new Backbone.Wreqr.RequestResponse();\n\nreqres.setHandlers({\n  \"foo\": function(){ /* ... */ },\n  \"bar\": {\n    callback: function(){ /* ... */ },\n    context: someObject\n  }\n});\n\nvar result = reqres.request(\"foo\");\n```\n\nThe \"foo\" handler is assigned directly to a function, while the\n\"bar\" handler is assigned to a function with a specific context\nto execute the function within.\n\nThis works for all `Handlers`, `Commands` and `RequestResponse`\nobjects.\n\n### Removing Handlers\n\nRemoving handlers for commands or requests is done the\nsame way, with the `removeHandler` or `removeAllHandlers`\nfunctions.\n\n```js\nreqres.removeHandler(\"foo\");\n\ncommands.removeAllHandlers();\n```\n\n### Extending Wreqr Objects\n\nThe EventAggregator, Commands and RequestResponse objects can all be\nextended using Backbone's standard `extend` method.\n\n```js\nvar MyEventAgg = Backbone.Wreqr.EventAggregator.extend({\n  foo: function(){...}\n});\n\nvar MyCommands = Backbone.Wreqr.Commands.extend({\n  foo: function(){...}\n});\n\nvar MyReqRes = Backbone.Wreqr.RequestResponse.extend({\n  foo: function(){...}\n});\n```\n\n## License\n\nMIT - see [LICENSE.md](https://raw.github.com/marionettejs/backbone.wreqr/master/LICENSE.md)\n\n## Dev\n* `npm install`\n* `npm install -g grunt-cli`\n* `grunt`\n\n",
  "readmeFilename": "readme.md",
  "_id": "backbone.wreqr@1.2.0",
  "_from": "backbone.wreqr@^1.0.0"
}
